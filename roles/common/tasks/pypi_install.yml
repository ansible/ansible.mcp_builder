---
# uv installation tasks

- name: Download uv installer
  ansible.builtin.get_url:
    url: "{{ common_uv_installer_url }}"
    dest: "/tmp/uv-install.sh"
    mode: "0755"

- name: Install uv
  ansible.builtin.shell: |
    set -o pipefail
    /tmp/uv-install.sh
  args:
    executable: /bin/bash
  when: not common_pypi_installed
  register: common_pypi_installed_result
  changed_when: common_pypi_installed_result.rc == 0

- name: Check common uv installation locations
  ansible.builtin.stat:
    path: "{{ uv_path_item }}"
  loop:
    - "{{ lookup('env', 'HOME') }}/.cargo/bin/uv"
    - "{{ lookup('env', 'HOME') }}/.local/bin/uv"
    - "{{ common_system_bin_path }}/uv"
    - "/usr/bin/uv"
  loop_control:
    loop_var: uv_path_item
  register: common_uv_location_check
  when: not common_pypi_installed

- name: Set uv path from common locations
  ansible.builtin.set_fact:
    common_uv_path:
      stdout: "{{ uv_check_item.uv_path_item }}"
  loop: "{{ common_uv_location_check.results }}"
  loop_control:
    loop_var: uv_check_item
    label: "{{ uv_check_item.uv_path_item }}"
  when:
    - uv_check_item.stat.exists
    - uv_check_item.stat.executable
    - not common_pypi_installed

- name: Search for uv binary in home directory as fallback
  ansible.builtin.find:
    paths: "{{ lookup('env', 'HOME') }}"
    patterns: "uv"
    file_type: file
    recurse: true
  register: common_uv_search_fallback
  when:
    - common_uv_path is not defined
    - not common_pypi_installed

- name: Set uv path from search fallback
  ansible.builtin.set_fact:
    common_uv_path:
      stdout: "{{ common_uv_search_fallback.files[0].path }}"
  when:
    - common_uv_path is not defined
    - not common_pypi_installed
    - common_uv_search_fallback.files | length > 0

- name: Create symlink for uv in system bin directory
  ansible.builtin.file:
    src: "{{ common_uv_path.stdout }}"
    dest: "{{ common_system_bin_path }}/uv"
    state: link
    force: true
  become: true
  when: common_uv_path.stdout != ""

- name: Check common uvx installation locations
  ansible.builtin.stat:
    path: "{{ uvx_path_item }}"
  loop:
    - "{{ lookup('env', 'HOME') }}/.cargo/bin/uvx"
    - "{{ lookup('env', 'HOME') }}/.local/bin/uvx"
    - "{{ common_system_bin_path }}/uvx"
    - "/usr/bin/uvx"
  loop_control:
    loop_var: uvx_path_item
  register: common_uvx_location_check
  when: not common_pypi_installed

- name: Set uvx path from common locations
  ansible.builtin.set_fact:
    common_uvx_path:
      stdout: "{{ uvx_check_item.uvx_path_item }}"
  loop: "{{ common_uvx_location_check.results }}"
  loop_control:
    loop_var: uvx_check_item
    label: "{{ uvx_check_item.uvx_path_item }}"
  when:
    - uvx_check_item.stat.exists
    - uvx_check_item.stat.executable
    - not common_pypi_installed

- name: Create symlink for uvx in system bin directory
  ansible.builtin.file:
    src: "{{ common_uvx_path.stdout }}"
    dest: "{{ common_system_bin_path }}/uvx"
    state: link
    force: true
  become: true
  when:
    - common_uvx_path.stdout != ""
    - not common_pypi_installed

- name: Verify uv installation
  ansible.builtin.command: uv --version
  register: common_uv_version_output
  changed_when: false

- name: Assert uv is working
  ansible.builtin.assert:
    that:
      - common_uv_version_output.rc == 0
      - common_uv_version_output.stdout is defined
      - common_uv_version_output.stdout != ""
    fail_msg: "UV installation verification failed - command 'uv --version' did not work"
    success_msg: "UV {{ common_uv_version_output.stdout }} verified successfully"

- name: Mark uv as installed
  ansible.builtin.set_fact:
    common_pypi_installed: true

- name: Get PyPI package name from current role registry (element 0)
  ansible.builtin.set_fact:
    common_pypi_package: >-
      {%- for var_name in vars.keys() -%}
        {%- if var_name.endswith('_mcp_registry') -%}
          {%- set var_value = vars[var_name] -%}
          {%- if var_value is iterable and var_value is not string and var_value[0].lang == 'pypi' -%}
            {{ var_value[0].name }}
      {%- endif -%}
        {%- endif -%}
      {%- endfor -%}

- name: Install PyPI MCP server package
  ansible.builtin.command:
    cmd: uv tool install {{ common_pypi_package }}

  register: common_pypi_install_result
  failed_when: false
  changed_when: common_pypi_install_result.rc == 0
  when:
    - common_pypi_package is defined

- name: Display successfully installed PyPI package
  ansible.builtin.debug:
    msg: "Successfully installed PyPI MCP server package: {{ common_pypi_package }}"
  when:
    - common_pypi_package is defined
    - common_pypi_install_result is defined
    - common_pypi_install_result.rc == 0
    - ansible_verbosity >= 2

- name: Display failed PyPI package installation
  ansible.builtin.debug:
    msg: "Failed to install PyPI package: {{ common_pypi_package }}"
  when:
    - common_pypi_package is defined
    - common_pypi_install_result is defined
    - common_pypi_install_result.rc != 0
    - ansible_verbosity >= 2

- name: Verify PyPI package is working
  ansible.builtin.command:
    cmd: uvx {{ common_pypi_package }} --help
  when: common_pypi_package is defined
  register: common_pypi_verify_result
  changed_when: false
