---
# Generate MCP servers manifest

- name: Discover registries from current role
  ansible.builtin.set_fact:
    common_server_registries: >-
      {%- set registries = [] -%}
      {%- for var_name in vars.keys() -%}
        {%- if var_name.endswith('_mcp_registry') -%}
          {%- set var_value = vars[var_name] -%}
          {%- if var_value is iterable and var_value is not string -%}
            {%- for server in var_value -%}
              {%- if server is mapping and server.name is defined and server.type is defined -%}
                {%- set _ = registries.append(server) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      {{ registries }}

- name: Assign paths to registry entries
  ansible.builtin.include_tasks: assign_registry_paths.yml

- name: Check if MCP servers manifest exists
  ansible.builtin.stat:
    path: "{{ common_mcp_base_path }}/mcpservers.json"
  register: common_manifest_exists

- name: Read and parse existing manifest
  ansible.builtin.set_fact:
    common_existing_manifest: "{{ lookup('file', common_mcp_base_path + '/mcpservers.json') | from_json }}"
  when: common_manifest_exists.stat.exists

- name: Generate new manifest entries
  ansible.builtin.set_fact:
    common_new_manifest_entries: >-
      {%- set servers = {} -%}
      {%- if common_server_registries is defined and common_server_registries | length > 0 -%}
        {%- for server in common_server_registries -%}
          {%- set server_id = server.name -%}
          {%- set server_data = {
              "type": server.type,
              "args": server.args | default([])
          } -%}
          {%- if server.type == "http" -%}
            {%- set _ = server_data.update({"url": server.path}) -%}
          {%- elif server.type == "stdio" -%}
            {%- set _ = server_data.update({"command": server.path}) -%}
          {%- endif -%}
          {%- if server.description is defined -%}
            {%- set _ = server_data.update({"description": server.description}) -%}
          {%- endif -%}
          {%- set _ = servers.update({server_id: server_data}) -%}
        {%- endfor -%}
      {%- endif -%}
      {{ servers }}

- name: Merge new entries with existing manifest
  ansible.builtin.set_fact:
    common_final_manifest: "{{ (common_existing_manifest | default({})) | combine(common_new_manifest_entries) }}"

- name: Write updated MCP servers manifest
  ansible.builtin.copy:
    content: "{{ common_final_manifest | to_nice_json(indent=4) }}"
    dest: "{{ common_mcp_base_path }}/mcpservers.json"
    mode: "0644"
  become: true
  when: common_new_manifest_entries | length > 0
